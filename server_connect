import asyncio
import json
import os
import sys
import argparse
import websockets

# 기본 WebSocket 주소 (IPv4 우선)
DEFAULT_WS_URL = os.environ.get("WS_URL", "ws://127.0.0.1:8000/ws")

async def interactive_loop(ws):
    print("연결됨. 아무 텍스트나 입력하세요. (quit 종료)")
    while True:
        try:
            msg = input("> ")
        except (EOFError, KeyboardInterrupt):
            print("\n종료합니다.")
            return
        if msg.lower().strip() in ["q", "quit", "exit"]:
            return
        # 서버로 전송
        await ws.send(json.dumps({"text": msg}, ensure_ascii=False))
        # 서버 응답 수신
        res = await ws.recv()
        data = json.loads(res)
        print(f"[감정] {data.get('emotion')} | [순화] {data.get('sanitized')}")

async def connect_with_retry(ws_url: str, retries: int = 10, base_delay: float = 0.5):
    """웹소켓 연결 자동 재시도 (지수 백오프)."""
    attempt = 0
    last_exc = None
    while attempt < retries:
        try:
            return await websockets.connect(ws_url)
        except OSError as e:
            last_exc = e
            delay = base_delay * (2 ** attempt)
            print(
                f"[경고] 웹소켓 연결 실패: {e}. {delay:.1f}초 후 재시도 ({attempt+1}/{retries})",
                file=sys.stderr,
            )
            await asyncio.sleep(min(delay, 5.0))
            attempt += 1
    raise RuntimeError(
        "웹소켓 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인하세요.\n"
        f"시도한 주소: {ws_url}\n"
        "1) 서버 실행:  uvicorn app_server:app --host 0.0.0.0 --port 8000\n"
        "2) 포트 확인:  lsof -i :8000  또는  netstat -an | grep 8000\n"
        "3) 방화벽 팝업 허용\n"
        "4) WS_URL/--ws 주소(호스트/포트/경로) 일치 확인\n"
    ) from last_exc

async def main():
    parser = argparse.ArgumentParser(description="실시간 순화 클라이언트")
    parser.add_argument("--ws", dest="ws_url", default=DEFAULT_WS_URL,
                        help="웹소켓 주소 (기본: ws://127.0.0.1:8000/ws 또는 환경변수 WS_URL)")
    args = parser.parse_args()

    ws_url = args.ws_url
    print(f"연결 시도: {ws_url}")

    try:
        ws = await connect_with_retry(ws_url)
    except Exception as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)

    try:
        async with ws:
            await interactive_loop(ws)
    finally:
        try:
            await ws.close()
        except Exception:
            pass

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n종료합니다.")
